{"version":3,"sources":["store/actions/unit.actions.ts","components/Header.tsx","store/actions/city.actions.ts","consts.ts","store/reducers/favorite.reducer.ts","store/reducers/city.reducer.ts","store/reducers/weather.reducer.ts","store/reducers/unit.reducer.ts","store/reducers/root.reducer.ts","services/CityService.ts","store/sagas/city.saga.ts","services/HttpWeatherService.ts","store/actions/weather.actions.ts","store/sagas/weather.saga.ts","store/sagas/root.saga.ts","store/RootStore.tsx","utils/getWeatherIcon.ts","components/CurrentConditionItem.tsx","screens/Favorites.tsx","components/search-cities/SearchCitiesInput.tsx","components/search-cities/CityListItem.tsx","components/search-cities/SearchCitiesList.tsx","components/search-cities/SearchCities.tsx","utils/dateFormat.ts","utils/unitConvert.ts","components/ForecastItem.tsx","utils/isFavorite.ts","store/actions/favorite.actions.ts","components/Forecasts.tsx","screens/Main.tsx","navigation/RootNavigation.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["unitActions","unitToggled","unit","type","payload","connect","state","dispatch","useEffect","className","to","icon","faHome","faHeart","onClick","cityStoreActions","citySearchAsync","term","citySearchFinished","cities","citySetCurrent","city","API_KEY","BASE_API_URL","FAVORITES_LOCALSTORAGE","JSON","parse","localStorage","getItem","DEFAULT_CITY","Version","Key","Type","Rank","LocalizedName","Country","ID","AdministrativeArea","initialState","favorites","currentCity","rootReducer","combineReducers","action","weather","currentForecast","forecast","favorite","includes","setItem","stringify","newState","filter","CityService","a","axios","get","console","log","data","error","cityService","handleSearchCities","rootCitySaga","call","findCities","put","takeLatest","HttpWeatherService","locationKey","isMetric","responses","map","f","currentConditions","then","Response","Promise","all","httpWeatherService","weatherStoreActions","weatherFetchForecastAsync","weatherFetchForecastFinished","weatherFetchForecastByCityKeyAsync","cityKey","handleFetchForecast","handleFetchForecastByCityKey","rootWeatherSaga","fiveDayForecasts","rootSaga","sagas","saga","spawn","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","RootStore","props","children","getWeatherIcon","number","iconNumber","location","history","useHistory","push","WeatherText","alt","src","WeatherIcon","Temperature","Imperial","Value","Unit","Metric","Favorites","useState","setFavorites","favoritesCondition","i","SearchCitiesInput","isTyping","useRef","inputValue","setInputValue","faSearch","onChange","e","target","value","length","current","setTimeout","placeholder","CityListItem","onCitySelect","href","preventDefault","stopPropagation","display","setDisplay","ref","handleClickOutside","event","contains","document","addEventListener","removeEventListener","handleCitySelect","SearchCities","dateToDay","date","Date","getDay","fToC","fahrenheit","toFixed","Day","IconPhrase","Icon","max","Maximum","min","Minimum","renderTemperature","isFavorite","getState","some","c","favoriteStoreActions","favoriteCityAdded","favoriteCityRemoved","forecasts","setFavorite","faStar","Headline","Text","DailyForecasts","EpochDate","Main","keyQuery","URLSearchParams","useLocation","search","homeQuery","RootNavigation","exact","path","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a9a79833.chunk.js","sourcesContent":["import { StoreAction } from \"./StoreAction\";\n\nexport type unitActionType = \"UNIT_TOGGLED\";\n\nexport interface unitAction extends StoreAction<unitActionType> { }\n\nfunction unitToggled(unit: string): unitAction {\n    return {\n        type: \"UNIT_TOGGLED\",\n        payload: {\n            unit,\n        },\n    };\n}\n\n\nexport const unitActions = {\n  unitToggled,\n};\n","import { faHeart, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { unitActions } from \"../store/actions/unit.actions\";\nimport { RootState } from \"../store/reducers/root.reducer\";\n\ninterface Props {\n  unit: \"F\" | \"C\";\n  dispatch: any;\n}\n\nconst Header: React.FC<Props> = ({ unit, dispatch }) => {\n  useEffect(() => {\n  }, [unit]);\n\n  \n\n  return (\n    <div className=\"header\">\n      <div className=\"navbar\">\n        <div className=\"navbar-links\">\n          <Link to=\"/\">\n            <FontAwesomeIcon icon={faHome} /> Main\n          </Link>\n          <Link to=\"/favorites\">\n            <FontAwesomeIcon icon={faHeart} /> Favorites\n          </Link>\n          <div className=\"unit\">\n            <span>Temp. unit</span>\n            <button\n              className={unit === \"C\" ? \"selected\" : \"\"}\n              onClick={() => {\n                dispatch(unitActions.unitToggled(\"C\"));\n              }}\n            >\n              C\n            </button>\n            <button\n              className={unit === \"F\" ? \"selected\" : \"\"}\n              onClick={() => {\n                dispatch(unitActions.unitToggled(\"F\"));\n              }}\n            >\n              F\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateProps = (state: RootState) => {\n  return {\n    unit: state.unit.unit,\n  };\n};\n\nexport default connect(mapStateProps)(Header);\n","import { City } from \"../../api/models/City\";\nimport { StoreAction } from \"./StoreAction\";\n\nexport type CityActionType = \"CITY_SEARCH_ASYNC\" | \"CITY_SEARCH_FINISHED\" | \"CITY_SET_CURRENT\";\n\nexport interface CityAction extends StoreAction<CityActionType> {}\n\nfunction citySearchAsync(term: string): CityAction {\n  return {\n    type: \"CITY_SEARCH_ASYNC\",\n    payload: {\n      term,\n    },\n  };\n}\n\nfunction citySearchFinished(cities: City[]): CityAction {\n  return {\n    type: \"CITY_SEARCH_FINISHED\",\n    payload: {\n      cities,\n    },\n  };\n}\n\nfunction citySetCurrent(city: City): CityAction{\n  return{\n    type:\"CITY_SET_CURRENT\",\n    payload:{\n      city\n    }\n  }\n}\n\nexport const cityStoreActions = {\n  citySearchAsync,\n  citySearchFinished,\n  citySetCurrent,\n};\n","// export const API_KEY = \"Pa7JZTED0ZLwQWUS6Z6qjztB6PWRqz0z\";\n// export const API_KEY = \"Fk9xGUzapojUPsvkosO8AGARxdSrcvpK\";\nexport const API_KEY = \"lFl4Kn6NNw0NGaPZkcmZmKiLDAAG4WqV\";\n\nexport const BASE_API_URL = \"http://dataservice.accuweather.com\";\nexport const FAVORITES_LOCALSTORAGE = JSON.parse(localStorage.getItem(\"favoriteCities\") || \"[]\")\nexport const DEFAULT_CITY = {\n  Version: 1,\n  Key: \"215854\",\n  Type: \"City\",\n  Rank: 31,\n  LocalizedName: \"Tel Aviv\",\n  Country: {\n    ID: \"IL\",\n    LocalizedName: \"Israel\",\n  },\n  AdministrativeArea: {\n    ID: \"TA\",\n    LocalizedName: \"Tel Aviv\",\n  },\n}\n","import { FAVORITES_LOCALSTORAGE } from \"../../consts\";\nimport { City } from \"./../../api/models/City\";\nimport { FavoriteAction } from \"./../actions/favorite.actions\";\n\nexport interface FavoriteState {\n  favorites: City[];\n}\n\nconst loadInitialState = () => {\n  const favorites = FAVORITES_LOCALSTORAGE;\n  return favorites && favorites;\n};\n\nconst initialState: FavoriteState = {\n  favorites: loadInitialState() || [],\n};\n\nexport function FavoriteReducer(\n  state = initialState,\n  action: FavoriteAction\n): FavoriteState {\n  switch (action.type) {\n    case \"FAVORITE_CITY_ADDED\":\n      if (!state.favorites.includes(action.payload.city)) {\n        localStorage.setItem(\n          \"favoriteCities\",\n          JSON.stringify([...state.favorites, action.payload.city])\n        );\n      }\n      return {\n        ...state.favorites,\n        favorites: [...state.favorites, action.payload.city],\n      };\n    case \"FAVORITE_CITY_REMOVED\":\n      const newState: City[] = state.favorites.filter(\n        (city) => city.Key !== action.payload.city.Key\n      );\n      localStorage.setItem(\"favoriteCities\", JSON.stringify(newState));\n      return { ...state, favorites: newState };\n\n    default:\n      return state;\n  }\n}\n","import { DEFAULT_CITY } from './../../consts';\nimport { City } from \"../../api/models/City\";\nimport { CityAction } from \"../actions/city.actions\";\n\nexport interface CityState {\n  cities: City[];\n  currentCity: City | null;\n}\n\nconst initialState: CityState = {\n  cities: [],\n  currentCity: DEFAULT_CITY,\n};\n\nexport function CityReducer(\n  state = initialState,\n  action: CityAction\n): CityState {\n  switch (action.type) {\n    case \"CITY_SEARCH_FINISHED\":\n      return {\n        ...state,\n        cities: action.payload.cities,\n      };\n    case \"CITY_SET_CURRENT\":\n      return{\n        ...state,\n        currentCity: action.payload.city\n      }\n    default:\n      return state;\n  }\n}\n","import { Forecast } from \"../../api/models/DailyForecast\";\nimport { WeatherAction } from \"../actions/weather.actions\";\n\nexport interface WeatherState {\n  currentForecast?: Forecast ;\n}\n\nconst initialState: WeatherState = {\n};\n\nexport function WeatherReducer(\n  state = initialState,\n  action: WeatherAction\n): WeatherState {\n  switch (action.type) {\n    case \"WEATHER_FETCH_FORECAST_FINISHED\":\n      return {\n        ...state,\n        currentForecast: action.payload.forecast,\n      };\n    default:\n      return state;\n  }\n}\n","import { unitAction } from './../actions/unit.actions';\n\nexport interface UnitState {\n    unit: \"F\" | \"C\";\n}\n\nconst initialState: UnitState = {\n  unit: \"F\",\n};\n\nexport function unitReducer(\n    state = initialState,\n    action: unitAction\n): UnitState {\n    switch (action.type) {\n        case \"UNIT_TOGGLED\":\n            return {\n                ...state,\n                unit: action.payload.unit\n            };\n            \n        default:\n            return state;\n    }\n}\n","import { FavoriteReducer, FavoriteState } from \"./favorite.reducer\";\nimport { combineReducers } from \"redux\";\n\nimport { CityReducer, CityState } from \"./city.reducer\";\nimport { WeatherReducer, WeatherState } from \"./weather.reducer\";\nimport { unitReducer, UnitState } from \"./unit.reducer\";\n\nexport interface RootState {\n  city: CityState;\n  weather: WeatherState;\n  favorite: FavoriteState;\n  unit: UnitState;\n\n}\n\nexport const rootReducer = combineReducers<RootState>({\n  city: CityReducer,\n  weather: WeatherReducer,\n  favorite: FavoriteReducer,\n  unit: unitReducer\n});\n","import axios from \"axios\";\nimport { City } from \"../api/models/City\";\nimport { API_KEY, BASE_API_URL } from \"../consts\";\n\ninterface AutocompleteResponse {\n  data: City[];\n}\n\nclass CityService {\n  async findCities(term: string): Promise<City[] | null> {\n    try {\n      const cities: AutocompleteResponse = await axios.get(\n        `${BASE_API_URL}/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${term}`\n      );\n      console.log(cities);\n      return cities.data;\n    } catch (error) {\n      console.error(error);\n      return null;\n    }\n  }\n}\n\nconst cityService = new CityService();\nexport default cityService;\n","import { put, takeLatest, call } from \"redux-saga/effects\";\nimport { City } from \"../../api/models/City\";\nimport cityService from \"../../services/CityService\";\nimport { CityAction, CityActionType, cityStoreActions } from \"../actions/city.actions\";\n\nexport function* handleSearchCities(action: CityAction): any {\n  const cities : City[] = yield call(cityService.findCities, action.payload.term);\n  yield put(cityStoreActions.citySearchFinished(cities));\n}\n\nexport default function* rootCitySaga() {\n  yield takeLatest<CityActionType>(\"CITY_SEARCH_ASYNC\", handleSearchCities);\n}\n","import axios from \"axios\";\nimport { Forecast } from \"../api/models/DailyForecast\";\nimport { API_KEY, BASE_API_URL, FAVORITES_LOCALSTORAGE } from \"./../consts\";\n\ninterface ForecastResponse {\n  data: Forecast;\n}\n\nclass HttpWeatherService {\n  async fiveDayForecasts(\n    locationKey: string,\n    isMetric?: boolean\n  ): Promise<Forecast | null> {\n    if (!isMetric || isMetric == null) {\n      isMetric = false;\n    }\n    try {\n      const forecast: ForecastResponse = await axios.get(\n        `${BASE_API_URL}/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}&metric=${isMetric}`\n      );\n      return forecast.data;\n    } catch (error) {\n      console.error(error);\n      return null;\n    }\n  }\n\n  currentConditions(locationKey: string) {\n    return axios.get(\n      `${BASE_API_URL}/currentconditions/v1/${locationKey}?apikey=${API_KEY}`\n    );\n  }\n\n  favoritesCondition() {\n    const responses = FAVORITES_LOCALSTORAGE.map((f: { Key: string }) =>\n      this.currentConditions(f.Key).then((Response) => Response.data)\n    );\n    return Promise.all(responses);\n  }\n}\n\nconst httpWeatherService = new HttpWeatherService();\nexport default httpWeatherService;\n","import { City } from \"../../api/models/City\";\nimport { Forecast } from \"../../api/models/DailyForecast\";\nimport { StoreAction } from \"./StoreAction\";\n\nexport type WeatherActionType =\n  | \"WEATHER_FETCH_FORECAST_ASYNC\"\n  | \"WEATHER_FETCH_FORECAST_FINISHED\"\n  | \"WEATHER_FETCH_FORECAST_BY_CITY_KEY\"\n  ;\n\nexport interface WeatherAction extends StoreAction<WeatherActionType> {}\n\nfunction weatherFetchForecastAsync(city: City): WeatherAction {\n  return {\n    type: \"WEATHER_FETCH_FORECAST_ASYNC\",\n    payload: {\n      city,\n    },\n  };\n}\n\nfunction weatherFetchForecastFinished(forecast: Forecast): WeatherAction {\n  return {\n    type: \"WEATHER_FETCH_FORECAST_FINISHED\",\n    payload: {\n      forecast,\n    },\n  };\n}\n\nfunction weatherFetchForecastByCityKeyAsync(cityKey: string): WeatherAction{\n  return{\n    type: \"WEATHER_FETCH_FORECAST_BY_CITY_KEY\",\n    payload:{\n      cityKey,\n    }\n  }\n}\n\nexport const weatherStoreActions = {\n  weatherFetchForecastAsync,\n  weatherFetchForecastFinished,\n  weatherFetchForecastByCityKeyAsync,\n};\n","import { put, takeLatest, call } from \"redux-saga/effects\";\nimport httpWeatherService from \"../../services/HttpWeatherService\";\nimport { cityStoreActions } from \"../actions/city.actions\";\nimport {\n  WeatherAction,\n  WeatherActionType,\n  weatherStoreActions,\n} from \"../actions/weather.actions\";\n\nexport function* handleFetchForecast(action: WeatherAction): any {\n  yield put(cityStoreActions.citySetCurrent(action.payload.city));\n  const forecast = yield call(\n    httpWeatherService.fiveDayForecasts,\n    action.payload.city.Key\n  );\n  yield put(weatherStoreActions.weatherFetchForecastFinished(forecast));\n}\n\nexport function* handleFetchForecastByCityKey(action: WeatherAction): any {\n  const forecast = yield call(\n    httpWeatherService.fiveDayForecasts,\n    action.payload.cityKey\n  );\n  yield put(weatherStoreActions.weatherFetchForecastFinished(forecast));\n}\n\nexport default function* rootWeatherSaga() {\n  yield takeLatest<WeatherActionType>(\n    \"WEATHER_FETCH_FORECAST_ASYNC\",\n    handleFetchForecast\n  );\n  yield takeLatest<WeatherActionType>(\n    \"WEATHER_FETCH_FORECAST_BY_CITY_KEY\",\n    handleFetchForecastByCityKey\n  );\n}\n","import { all, call, spawn } from \"redux-saga/effects\";\nimport rootCitySaga from \"./city.saga\";\nimport rootWeatherSaga from \"./weather.saga\";\n\nexport function* rootSaga() {\n  const sagas: any = [rootCitySaga, rootWeatherSaga];\n  yield all(\n    sagas.map((saga: any) =>\n      spawn(function* () {\n        while (true) {\n          try {\n            yield call(saga);\n            break;\n          } catch (e) {\n            console.log(e);\n          }\n        }\n      })\n    )\n  );\n}\n","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport {\n  createStore,\n  applyMiddleware,\n  EmptyObject,\n  AnyAction,\n  Store,\n} from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootReducer, RootState } from \"./reducers/root.reducer\";\nimport { rootSaga } from \"./sagas/root.saga\";\n\nexport type RootStoreProps = Store<EmptyObject & RootState, AnyAction>;\n\nconst sagaMiddleware = createSagaMiddleware();\nexport const store: RootStoreProps = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware)\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport const RootStore = (props: any) => {\n  return <Provider store={store}>{props.children}</Provider>;\n};\n","const getWeatherIcon = (number: number):string =>{\n    const iconNumber:string = number < 10 ? `0${number}` : `${number}`\n    return `https://developer.accuweather.com/sites/default/files/${iconNumber}-s.png`\n}\n\nexport default getWeatherIcon;\n\n\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { City } from \"../api/models/City\";\nimport { CurrentCondition } from \"../api/models/CurrentCondition\";\nimport { cityStoreActions } from \"../store/actions/city.actions\";\nimport { RootState } from \"../store/reducers/root.reducer\";\nimport { store } from \"../store/RootStore\";\nimport getWeatherIcon from \"../utils/getWeatherIcon\";\n\ninterface Props {\n  data: CurrentCondition[];\n  city: City;\n  unit: \"F\" | \"C\";\n}\n\nconst CurrentConditionItem: React.FC<Props> = ({ data, city, unit }) => {\n  const location = data[0];\n  let history = useHistory();\n\n  const onLocationClick = () =>{\n    store.dispatch(cityStoreActions.citySetCurrent(city))\n    history.push(`/?key=${city.Key}`)\n  }\n\n  return (\n    <div className=\"location-item\" onClick={onLocationClick}>\n      <h4 className=\"city-name\">{city.LocalizedName}</h4>\n      <p className=\"Weather-text\">{location.WeatherText}</p>\n      <img\n        alt={location.WeatherText}\n        src={getWeatherIcon(location.WeatherIcon)}\n      />\n\n      {unit === \"F\" && (\n        <p className=\"temp\">\n          {location.Temperature.Imperial.Value}\n          {location.Temperature.Imperial.Unit}°\n        </p>\n      )}\n      {unit === \"C\" && (\n        <p className=\"temp\">\n          {location.Temperature.Metric.Value}\n          {location.Temperature.Metric.Unit}°\n        </p>\n      )}\n    </div>\n  );\n};\n\nconst mapStateProps = (state: RootState) => {\n  return {\n    unit: state.unit.unit,\n  };\n};\n\nexport default connect(mapStateProps)(CurrentConditionItem);\n","import React, { useEffect, useState } from \"react\";\nimport CurrentConditionItem from \"../components/CurrentConditionItem\";\nimport { FAVORITES_LOCALSTORAGE } from \"../consts\";\nimport httpWeatherService from \"../services/HttpWeatherService\"; \n\nconst Favorites: React.FC = () => {\n  const [favorites, setFavorites] = useState<any[]>();\n\n  useEffect(() => {\n    httpWeatherService\n      .favoritesCondition()\n      .then((responses) => setFavorites(responses));\n  }, []);\n\n  return (\n    <div className=\"favorites\">\n      <h1>Favorites</h1>\n      <div className=\"favorite-cities\">\n        {favorites &&\n          favorites.map((city, i) => (\n            <CurrentConditionItem\n              key={i}\n              data={city}\n              city={FAVORITES_LOCALSTORAGE[i]}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Favorites;\n","import { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, useRef, useState } from \"react\";\nimport { cityStoreActions } from \"../../store/actions/city.actions\";\nimport { store } from \"../../store/RootStore\";\n\nconst SearchCitiesInput: React.FC = () => {\n  const isTyping = useRef<boolean>(false);\n\n  const [inputValue, setInputValue] = useState('')\n\n  const handleTextChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value)\n    \n\n    if (inputValue.length < 2) {\n      store.dispatch(cityStoreActions.citySearchFinished([]));\n    } else if (!isTyping.current) {\n      isTyping.current = true;\n\n      if (inputValue && inputValue.length >= 2) {\n        store.dispatch(cityStoreActions.citySearchAsync(inputValue));\n      }\n\n      setTimeout(() => {\n        isTyping.current = false;\n      }, 150);\n    }\n  };\n\n  return (\n    <div className=\"search-unit\">\n      <FontAwesomeIcon className=\"search-icon\" icon={faSearch} />\n      <input\n        onChange={handleTextChange}\n        type=\"text\"\n        className=\"search-input\"\n        placeholder=\"Enter city name\"\n        value={inputValue}\n      />\n    </div>\n  );\n};\n\nexport default SearchCitiesInput;\n","import React from \"react\";\nimport { City } from \"../../api/models/City\";\n\ninterface Props {\n  city: City;\n  onCitySelect: (city: City) => void;\n}\n\nexport const CityListItem: React.FC<Props> = ({ city, onCitySelect }) => {\n  const handleOnClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onCitySelect(city);\n    \n  };\n\n  return (\n    <a\n      href=\" \"\n      onClick={handleOnClick}\n      className=\"city-found-name\"\n      key={city.LocalizedName}\n    >\n      {city.LocalizedName}\n    </a>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { RootState } from \"../../store/reducers/root.reducer\";\nimport { weatherStoreActions } from \"../../store/actions/weather.actions\";\nimport { City } from \"../../api/models/City\";\nimport { CityListItem } from \"./CityListItem\";\n\ninterface Props {\n  cities: City[];\n  dispatch: any;\n}\n\nconst SearchCitiesList: React.FC<Props> = ({ cities, dispatch }) => {\n  const [display, setDisplay] = useState(false);\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>;\n\n  useEffect(() => {\n    function handleClickOutside(event: any) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setDisplay(false);\n      }\n    }\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, []);\n\n  useEffect(() => {\n    setDisplay(cities && cities.length > 0);\n  }, [cities]);\n\n  const handleCitySelect = (city:City): void=>{\n    dispatch(weatherStoreActions.weatherFetchForecastAsync(city))\n    setDisplay(false)  \n  }\n\n  \n  if (!display) return null;\n\n  return (\n    <div ref={ref} className=\"search-cities-list\">\n      {cities.map((city) => (\n        <CityListItem key={city.Key} city={city} onCitySelect={handleCitySelect} />\n      ))}\n    </div>\n  );\n};\n\nconst mapStateProps = (state: RootState) => {\n  return {\n    cities: state.city.cities,\n  };\n};\n\nexport default connect(mapStateProps)(SearchCitiesList);\n","import React from \"react\";\nimport SearchCitiesInput from \"./SearchCitiesInput\";\nimport SearchCitiesList from \"./SearchCitiesList\";\n\nconst SearchCities: React.FC = () => {\n  return (\n    <div className=\"search-bar\">\n      <SearchCitiesInput />\n      <SearchCitiesList />\n    </div>\n  );\n};\n\nexport default SearchCities;\n","const dateToDay = (date: string):string => {\n    const day = new Date(date).getDay()\n    const days = [\n        'Sunday',\n        'Monday',\n        'Teusday',\n        'Wedensday',\n        'Thursday',\n        'Friday',\n        'Saturday']\n        return days[day]\n\n}\n\nexport default dateToDay;","export function cToF(celsius: number): number {\n  return +((celsius * 9) / 5 + 32).toFixed(1)\n}\n\nexport function fToC(fahrenheit: number): number {\n  return +(((fahrenheit - 32) * 5) / 9).toFixed(1)\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { DailyForecast } from \"../api/models/DailyForecast\";\nimport { RootState } from \"../store/reducers/root.reducer\";\nimport dateToDay from \"../utils/dateFormat\";\nimport getWeatherIcon from \"../utils/getWeatherIcon\";\nimport { fToC } from \"../utils/unitConvert\";\n\ninterface Props {\n  forecast: DailyForecast;\n  unit: \"F\" | \"C\";\n}\n\nconst ForecastItem: React.FC<Props> = ({ forecast, unit }) => {\n  const renderTemperature = () => {\n    const max =\n      unit === \"F\"\n        ? forecast.Temperature.Maximum.Value\n        : fToC(forecast.Temperature.Maximum.Value);\n\n    const min =\n      unit === \"F\"\n        ? forecast.Temperature.Minimum.Value\n        : fToC(forecast.Temperature.Minimum.Value);\n    return (\n      <p className=\"temp\">\n        {min} - {max} {unit}°\n      </p>\n    );\n  };\n\n  \n  \n  return (\n    <div className=\"forecast-item\">\n      <p className=\"day\">{dateToDay(forecast.Date)}</p>\n      <img\n        alt={forecast.Day.IconPhrase}\n        src={getWeatherIcon(forecast.Day.Icon)}\n      />\n      <label>{forecast.Day.IconPhrase}</label>\n      {renderTemperature()}\n    </div>\n  );\n};\n\nconst mapStateProps = (state: RootState) => {\n  return {\n    unit: state.unit.unit,\n  };\n};\n\nexport default connect(mapStateProps)(ForecastItem);\n","import { store } from '../store/RootStore';\nimport { City } from '../api/models/City';\n\nconst isFavorite = (city: (City | undefined | null)): boolean => {\n    return store.getState().favorite.favorites.some(c =>c.Key === city?.Key)\n    // let arrJson = localStorage.getItem(\"favoriteCities\")\n    // let arr = arrJson && JSON.parse(arrJson)\n    // if(arr){\n    //     return arr.includes(city)\n    // }\n    // return false\n    \n}\n\nexport default isFavorite;","import { City } from \"../../api/models/City\";\nimport { StoreAction } from \"./StoreAction\";\n\nexport type favoriteActionType = \"FAVORITE_CITY_ADDED\" | \"FAVORITE_CITY_REMOVED\";\n\nexport interface FavoriteAction extends StoreAction<favoriteActionType> { }\n\nfunction favoriteCityAdded(city: City | null): FavoriteAction {\n    return {\n        type: \"FAVORITE_CITY_ADDED\",\n        payload: {\n            city,\n        },\n    };\n}\nfunction favoriteCityRemoved(city: City | null): FavoriteAction {\n    return {\n        type: \"FAVORITE_CITY_REMOVED\",\n        payload: {\n            city,\n        },\n    };\n}\n\n\nexport const favoriteStoreActions = {\n    favoriteCityAdded,\n    favoriteCityRemoved\n\n};\n","import React, { useEffect, useState } from \"react\";\nimport { store } from \"../store/RootStore\";\nimport { RootState } from \"../store/reducers/root.reducer\";\nimport { connect } from \"react-redux\";\nimport { faStar } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport ForecastItem from \"./ForecastItem\";\nimport { Forecast } from \"../api/models/DailyForecast\";\nimport { City } from \"../api/models/City\";\nimport isFavorite from \"../utils/isFavorite\";\nimport { favoriteStoreActions } from \"../store/actions/favorite.actions\";\n\ninterface Props {\n  forecasts: Forecast | undefined;\n  currentCity: City | null;\n}\n\nconst Forecasts: React.FC<Props> = ({ forecasts, currentCity }) => {\n  const [favorite, setFavorite] = useState(isFavorite(currentCity));\n\n  useEffect(() => {\n    setFavorite(isFavorite(currentCity));\n  }, [currentCity]);\n\n  const handleToggleFavorite = () => {\n    if (!favorite) {\n      setFavorite(true);\n      store.dispatch(favoriteStoreActions.favoriteCityAdded(currentCity));\n    } else {\n      setFavorite(false);\n      store.dispatch(favoriteStoreActions.favoriteCityRemoved(currentCity));\n    }\n  };\n\n \n\n  return (\n    <div className=\"forecasts \">\n      {currentCity && (\n        <div className=\"forecasts-top\">\n          <h2 className=\"city-name\">{currentCity?.LocalizedName}</h2>\n          <FontAwesomeIcon\n            className={favorite ? \"star-favorite\" : \"star\"}\n            icon={faStar}\n            onClick={handleToggleFavorite}\n          />\n        </div>\n      )}\n      <div className=\"forecasts-bottom\">\n        <h3 className=\"headline-text\">{forecasts?.Headline.Text}</h3>\n        <div className=\"fourcasts-cards\">\n          {forecasts &&\n            forecasts.DailyForecasts.map((forecast) => (\n              <ForecastItem key={forecast.EpochDate} forecast={forecast} />\n            ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateProps = (state: RootState) => {\n  return {\n    forecasts: state.weather.currentForecast,\n    currentCity: state.city.currentCity,\n  };\n};\n\nexport default connect(mapStateProps)(Forecasts);\n","import React, { useEffect } from \"react\";\nimport SearchCities from \"../components/search-cities/SearchCities\";\nimport Forecasts from \"../components/Forecasts\";\nimport { DEFAULT_CITY} from \"../consts\";\nimport { store } from \"../store/RootStore\";\nimport { weatherStoreActions } from \"../store/actions/weather.actions\";\nimport { useLocation } from \"react-router\";\n\n\nconst Main: React.FC = () => {\n\n  function useQuery() {\n    return new URLSearchParams(useLocation().search);\n  }\n\n  let query = useQuery();\n  const keyQuery = query.get(\"key\")\n\n  useEffect(() => {\n    let homeQuery = keyQuery ? keyQuery : DEFAULT_CITY.Key\n    store.dispatch(\n      weatherStoreActions.weatherFetchForecastByCityKeyAsync(homeQuery)\n    );\n  }, [keyQuery]);\n\n  \n\n  return (\n    <div className=\"main\">\n      <SearchCities />\n      <Forecasts />\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport Favorites from \"../screens/Favorites\";\nimport Main from \"../screens/Main\";\n\nconst RootNavigation: React.FC = () => {\n  return (\n      <Switch>\n        <Route exact path=\"/\">\n          <Main />\n        </Route>\n\n        <Route exact path=\"/favorites\">\n          <Favorites />\n        </Route>\n      </Switch>\n  );\n};\n\nexport default RootNavigation;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport RootNavigation from \"./navigation/RootNavigation\";\nimport { RootStore } from \"./store/RootStore\";\n\nconst App: React.FC = () => {\n  return (\n    <RootStore>\n      <HashRouter >\n        <Header />\n        <RootNavigation />\n      </HashRouter>\n    </RootStore>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}